from flask import Flask, render_template, request, redirect, session, url_for, flash, jsonify
import os
from datetime import datetime
import requests
import json
import logging

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ Supabase
try:
    from supabase_config import supabase, get_suppliers, get_products_by_supplier, get_all_products
    from config import USER_PASSWORD, ADMIN_PASSWORD, BOT_TOKEN, GROUP_ID
except ImportError:
    # –ï—Å–ª–∏ –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    import sys
    import os
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª supabase_config.py, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not os.path.exists('supabase_config.py'):
        with open('supabase_config.py', 'w') as f:
            f.write('''
from supabase import create_client
import os
import logging

logger = logging.getLogger('app')

# –ü–æ–ª—É—á–∞–µ–º URL –∏ –∫–ª—é—á Supabase –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
url = os.environ.get("SUPABASE_URL", "https://wxlrektensoxrnwipsbs.supabase.co")
key = os.environ.get("SUPABASE_KEY", "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Ind4bHJla3RlbnNveHJud2lwc2JzIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0NDU1NDk3NCwiZXhwIjoyMDYwMTMwOTc0fQ.45X6uk_ZfNvwLjmBOum2s3JZnm6KehUvImzzec0iWMc")

try:
    supabase = create_client(url, key)
    logger.info("Supabase –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase: {e}")
    raise

def get_suppliers():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤"""
    response = supabase.table("suppliers").select("*").order("name").execute()
    return response.data

def get_products_by_supplier(supplier_id):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É"""
    response = supabase.table("products").select("*").eq("supplier_id", supplier_id).order("name").execute()
    return response.data

def get_all_products():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã"""
    response = supabase.table("products").select("*, suppliers(name)").order("name").execute()
    return response.data

def get_request_with_items(request_id):
    """–ü–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏"""
    request = supabase.table("requests").select("*, suppliers(name), branches(name)").eq("id", request_id).single().execute()
    items = supabase.table("request_items").select("*, products(*)").eq("request_id", request_id).execute()
    
    return {
        "request": request.data,
        "items": items.data
    }
''')
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª config.py, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not os.path.exists('config.py'):
        with open('config.py', 'w') as f:
            f.write('''
# –ü–∞—Ä–æ–ª—å –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_PASSWORD = "1234"

# –ü–∞—Ä–æ–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_PASSWORD = "admin"

# Telegram Bot API Token
BOT_TOKEN = '7937013933:AAF_iuBecx-o0etgGZhEzWGxv3cBHWfDpYQ'

# Telegram Group ID
GROUP_ID = '-1002633190524'
''')
    
    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª–∏
    from supabase_config import supabase, get_suppliers, get_products_by_supplier, get_all_products
    from config import USER_PASSWORD, ADMIN_PASSWORD, BOT_TOKEN, GROUP_ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('app')

app = Flask(__name__)
app.secret_key = os.environ.get('SECRET_KEY', os.urandom(24))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

def send_to_telegram(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –≥—Ä—É–ø–ø—É"""
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": GROUP_ID,
        "text": message,
        "parse_mode": "HTML"
    }
    try:
        response = requests.post(url, json=payload)
        return response.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
        return None

@app.route('/')
def index():
    return redirect(url_for('login'))

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        password = request.form.get('password')
        if password == USER_PASSWORD:
            session['user'] = True
            return redirect(url_for('menu'))
        elif password == ADMIN_PASSWORD:
            session['admin'] = True
            return redirect(url_for('admin'))
        return render_template('login.html', error='–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å')
    return render_template('login.html')

@app.route('/admin_login', methods=['GET', 'POST'])
def admin_login():
    if request.method == 'POST':
        try:
            password = request.form.get('password')
            if password == ADMIN_PASSWORD:
                session['admin'] = True
                return redirect(url_for('admin'))
            else:
                flash('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å', 'error')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: {e}")
            flash('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ', 'error')
    return render_template('admin_login.html')

@app.route('/logout')
def logout():
    session.clear()
    return redirect(url_for('login'))

@app.route('/menu')
def menu():
    if not session.get('user') and not session.get('admin'):
        return redirect(url_for('login'))
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
    suppliers = get_suppliers()
    return render_template('menu.html', suppliers=suppliers)

@app.route('/supplier/<supplier_id>', methods=['GET', 'POST'])
def supplier_form(supplier_id):
    if not session.get('user') and not session.get('admin'):
        return redirect(url_for('login'))
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ
    supplier_response = supabase.table("suppliers").select("*").eq("id", supplier_id).execute()
    if not supplier_response.data:
        flash('–ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
        return redirect(url_for('menu'))
    
    supplier = supplier_response.data[0]
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    products = get_products_by_supplier(supplier_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª–∏–∞–ª–æ–≤
    branches_response = supabase.table("branches").select("*").order("name").execute()
    branches = branches_response.data
    
    if request.method == 'POST':
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
        cook_name = request.form.get('cook_name')
        fill_date = request.form.get('fill_date')
        request_date = request.form.get('request_date')
        branch_id = request.form.get('branch_id')
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞
        branch_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∏–ª–∏–∞–ª"
        for branch in branches:
            if str(branch['id']) == branch_id:
                branch_name = branch['name']
                break
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É
        request_data = {
            "cook_name": cook_name,
            "fill_date": fill_date,
            "request_date": request_date,
            "branch_id": branch_id,
            "supplier_id": supplier_id,
            "created_at": datetime.now().isoformat()
        }
        
        request_response = supabase.table("requests").insert(request_data).execute()
        
        if len(request_response.data) > 0:
            request_id = request_response.data[0]['id']
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞—è–≤–∫—É
            request_items = []
            selected_products = []
            
            for product in products:
                quantity = request.form.get(f'product_{product["id"]}')
                if quantity and quantity.isdigit() and int(quantity) > 0:
                    request_items.append({
                        "request_id": request_id,
                        "product_id": product["id"],
                        "quantity": int(quantity)
                    })
                    
                    selected_products.append({
                        "name": product["name"],
                        "quantity": int(quantity)
                    })
            
            if request_items:
                supabase.table("request_items").insert(request_items).execute()
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
                emoji = "üì¶"
                if supplier['name'] == "–†—ã–±–∞":
                    emoji = "üêü"
                elif supplier['name'] == "–•–æ–∑. —Ç–æ–≤–∞—Ä—ã":
                    emoji = "üßπ"
                
                message = f"{emoji} <b>{supplier['name']}</b>\n"
                message += f"üè¢ <b>–§–∏–ª–∏–∞–ª:</b> {branch_name}\n"
                message += f"üë®‚Äçüç≥ <b>–ü–æ–≤–∞—Ä:</b> {cook_name}\n"
                message += f"üìÖ <b>–î–∞—Ç–∞ –∑–∞—è–≤–∫–∏:</b> {request_date}\n"
                message += f"üìù <b>–î–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:</b> {fill_date}\n\n"
                
                for item in selected_products:
                    message += f"üîπ {item['name']}: {item['quantity']}\n"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
                telegram_response = send_to_telegram(message)
                
                if telegram_response and telegram_response.get('ok'):
                    flash('–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram!', 'success')
                else:
                    flash('–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ Telegram', 'warning')
                
                return redirect(url_for('menu'))
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤, —É–¥–∞–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞—è–≤–∫—É
                supabase.table("requests").delete().eq("id", request_id).execute()
                flash('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä', 'error')
        else:
            flash('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏', 'error')
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –¥–ª—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
    today = datetime.now().strftime('%Y-%m-%d')
    
    return render_template('supplier_form.html', 
                          supplier=supplier, 
                          products=products, 
                          branches=branches, 
                          today=today)

@app.route('/hoz', methods=['GET', 'POST'])
def hoz_form():
    if not session.get('user') and not session.get('admin'):
        return redirect(url_for('login'))
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ "–•–æ–∑. —Ç–æ–≤–∞—Ä—ã"
    supplier_response = supabase.table("suppliers").select("*").eq("name", "–•–æ–∑. —Ç–æ–≤–∞—Ä—ã").execute()
    if supplier_response.data:
        supplier_id = supplier_response.data[0]['id']
        return redirect(url_for('supplier_form', supplier_id=supplier_id))
    
    flash('–ü–æ—Å—Ç–∞–≤—â–∏–∫ "–•–æ–∑. —Ç–æ–≤–∞—Ä—ã" –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
    return redirect(url_for('menu'))

@app.route('/fish', methods=['GET', 'POST'])
def fish_form():
    if not session.get('user') and not session.get('admin'):
        return redirect(url_for('login'))
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ "–†—ã–±–∞"
    supplier_response = supabase.table("suppliers").select("*").eq("name", "–†—ã–±–∞").execute()
    if supplier_response.data:
        supplier_id = supplier_response.data[0]['id']
        return redirect(url_for('supplier_form', supplier_id=supplier_id))
    
    flash('–ü–æ—Å—Ç–∞–≤—â–∏–∫ "–†—ã–±–∞" –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
    return redirect(url_for('menu'))

@app.route('/admin', methods=['GET'])
def admin():
    if not session.get('admin'):
        return redirect(url_for('login'))
    
    suppliers = get_suppliers()
    products = get_all_products()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∏–ª–∏–∞–ª—ã
    branches_response = supabase.table("branches").select("*").order("name").execute()
    branches = branches_response.data
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏
    requests_response = supabase.table("requests").select(
        "*, suppliers(name), branches(name)"
    ).order("created_at", desc=True).execute()
    requests = requests_response.data
    
    return render_template('admin.html', 
                          suppliers=suppliers, 
                          products=products, 
                          branches=branches, 
                          requests=requests)

@app.route('/admin/add_supplier', methods=['POST'])
def add_supplier():
    if not session.get('admin'):
        return redirect(url_for('login'))
    name = request.form.get('name')
    supabase.table("suppliers").insert({"name": name}).execute()
    flash('–ü–æ—Å—Ç–∞–≤—â–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω', 'success')
    return redirect(url_for('admin'))

@app.route('/admin/delete_supplier/<int:supplier_id>', methods=['POST'])
def delete_supplier(supplier_id):
    if not session.get('admin'):
        return redirect(url_for('login'))
    supabase.table("suppliers").delete().eq("id", supplier_id).execute()
    flash('–ü–æ—Å—Ç–∞–≤—â–∏–∫ —É–¥–∞–ª–µ–Ω', 'success')
    return redirect(url_for('admin'))

@app.route('/admin/add_product', methods=['POST'])
def add_product():
    if not session.get('admin'):
        return redirect(url_for('login'))
    name = request.form.get('name')
    supplier_id = request.form.get('supplier_id')
    
    supabase.table("products").insert({
        "name": name, 
        "supplier_id": supplier_id
    }).execute()
    
    flash('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω', 'success')
    return redirect(url_for('admin'))

@app.route('/admin/delete_product/<int:product_id>', methods=['POST'])
def delete_product(product_id):
    if not session.get('admin'):
        return redirect(url_for('login'))
    supabase.table("products").delete().eq("id", product_id).execute()
    flash('–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω', 'success')
    return redirect(url_for('admin'))

@app.route('/admin/add_branch', methods=['POST'])
def add_branch():
    if not session.get('admin'):
        return redirect(url_for('login'))
    name = request.form.get('name')
    supabase.table("branches").insert({"name": name}).execute()
    flash('–§–∏–ª–∏–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω', 'success')
    return redirect(url_for('admin'))

@app.route('/admin/delete_branch/<int:branch_id>', methods=['POST'])
def delete_branch(branch_id):
    if not session.get('admin'):
        return redirect(url_for('login'))
    supabase.table("branches").delete().eq("id", branch_id).execute()
    flash('–§–∏–ª–∏–∞–ª —É–¥–∞–ª–µ–Ω', 'success')
    return redirect(url_for('admin'))

@app.route('/admin/change_password', methods=['POST'])
def change_password():
    if not session.get('admin'):
        return redirect(url_for('login'))
    
    password_type = request.form.get('password_type')
    new_password = request.form.get('new_password')
    
    if password_type == 'user':
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ config.py
        with open('config.py', 'r') as f:
            lines = f.readlines()
        
        with open('config.py', 'w') as f:
            for line in lines:
                if line.startswith('USER_PASSWORD'):
                    f.write(f'USER_PASSWORD = "{new_password}"\n')
                else:
                    f.write(line)
        
        flash('–ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω', 'success')
    
    elif password_type == 'admin':
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ config.py
        with open('config.py', 'r') as f:
            lines = f.readlines()
        
        with open('config.py', 'w') as f:
            for line in lines:
                if line.startswith('ADMIN_PASSWORD'):
                    f.write(f'ADMIN_PASSWORD = "{new_password}"\n')
                else:
                    f.write(line)
        
        flash('–ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω', 'success')
    
    return redirect(url_for('admin'))

@app.route('/admin/requests/<int:request_id>', methods=['GET'])
def view_request(request_id):
    if not session.get('admin'):
        return redirect(url_for('login'))
    
    request_response = supabase.table("requests").select(
        "*, suppliers(name), branches(name)"
    ).eq("id", request_id).execute()
    
    if not request_response.data:
        flash('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'error')
        return redirect(url_for('admin'))
    
    request_data = request_response.data[0]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∑–∞—è–≤–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
    items_response = supabase.table("request_items").select(
        "*, products(id, name)"
    ).eq("request_id", request_id).execute()
    
    request_items = items_response.data
    
    return render_template('request_details.html', request=request_data, items=request_items)

@app.route('/admin/test_telegram', methods=['GET'])
def test_telegram():
    """–¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"""
    if not session.get('admin'):
        return redirect(url_for('login'))
    
    message = "<b>üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram."
    response = send_to_telegram(message)
    
    if response and response.get('ok'):
        flash('–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram!', 'success')
    else:
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {json.dumps(response)}', 'error')
    
    return redirect(url_for('admin'))

@app.route('/admin/import_default_data', methods=['POST'])
def import_default_data():
    """–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    if not session.get('admin'):
        return redirect(url_for('login'))
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    suppliers = {
        '–°–≤–∏—Ç –õ–∞–π—Ñ': None,
        '–†–∞—Ñ—Ç': None,
        '–û—à–∏': None,
        '–•–æ–∑. —Ç–æ–≤–∞—Ä—ã': None,
        '–†—ã–±–∞': None
    }
    
    for supplier_name in suppliers.keys():
        result = supabase.table("suppliers").select("*").eq("name", supplier_name).execute()
        if result.data:
            suppliers[supplier_name] = result.data[0]['id']
        else:
            result = supabase.table("suppliers").insert({"name": supplier_name}).execute()
            suppliers[supplier_name] = result.data[0]['id']
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª–∏–∞–ª—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    branches = ['–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π', '–°–µ–≤–µ—Ä–Ω—ã–π', '–Æ–∂–Ω—ã–π', '–ó–∞–ø–∞–¥–Ω—ã–π', '–í–æ—Å—Ç–æ—á–Ω—ã–π']
    for branch_name in branches:
        result = supabase.table("branches").select("*").eq("name", branch_name).execute()
        if not result.data:
            supabase.table("branches").insert({"name": branch_name}).execute()
    
    # –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
    default_products = {
        "–°–≤–∏—Ç –õ–∞–π—Ñ": [
            "–°—ã—Ä –ø–æ–ª—É—Ç–≤–µ—Ä–¥—ã–π –ú–æ—Ü–∞—Ä–µ–ª–ª–∞ –ü–∏—Ü—Ü–∞ 40% Bonfesio Cooking 2.6–∫–≥",
            "–°—ã—Ä –ü–∞—Ä–º–µ–∑–∞–Ω 9 –ú–µ—Å—è—Ü–µ–≤ –Æ–ö–ú–ü –¶–∏–ª–∏–Ω–¥—Ä 45% 6-6.5–∫–≥",
            "–°—ã—Ä \"Hochland\" –ø–ª–∞–≤–ª–µ–Ω–Ω—ã–π –ª–æ–º—Ç–µ–≤–æ–π –ë–∏—Å—Ç—Ä–æ –ß–µ–¥–¥–µ—Ä 1.107–∫–≥ (90 –ª–æ–º—Ç–∏–∫–æ–≤)",
            "–ö—Ä–∞–±–æ–≤–æ–µ –º—è—Å–æ –°–Ω–µ–∂–Ω—ã–π –∫—Ä–∞–± –æ—Ö–ª. (–∏–º–∏—Ç–∞—Ü–∏—è –∏–∑ —Å—É—Ä–∏–º–∏) VICI 500–≥—Ä",
            "–ö—Ä–µ–≤–µ—Ç–∫–∏ –±/–≥ –≤ –ø–∞–Ω—Ü–∏—Ä–µ —Å/–º Empacadora Bibo SA –≠–∫–≤–∞–¥–æ—Ä 16/20 1–∫–≥",
            "–ú–∞–π–æ–Ω–µ–∑ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π SoPro 67% 9.6–∫–≥",
            "–°–æ—É—Å –û—Ä–µ—Ö–æ–≤—ã–π (–∫—É–Ω–∂—É—Ç–Ω—ã–π) Smart Chef 1–ª",
            "–°–æ—É—Å –®—Ä–∏—Ä–∞—á–∞ 0.815–∫–≥ Uni-Eagle",
            "–°–æ—É—Å –°–æ–µ–≤—ã–π classic Smart Chef 20–ª",
            "–ö–µ—Ç—á—É–ø Smart Chef –¢–æ–º–∞—Ç–Ω—ã–π 2–∫–≥ –ë–∞–ª–∫",
            "–°–æ—É—Å Smart Chef –°—ã—Ä–Ω—ã–π 1–∫–≥",
            "–°–æ—É—Å –¶–µ–∑–∞—Ä—å –ê—Å—Ç–æ—Ä–∏—è 1–∫–≥",
            "–ü–∞–ª–æ—á–∫–∏ –°—ã—Ä–Ω—ã–µ –§—Ä–æ—Å—Ç-–∞ –ú–æ—Ü–∞—Ä–µ–ª–ª–∞ –≤ –ü–∞–Ω–∏—Ä–æ–≤–∫–µ –ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ 1–∫–≥",
            "–°—É—Ö–∞—Ä–∏ –ü–∞–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ Smart Chef –ü–∞–Ω–∫–æ –ì–æ–ª–¥ 4–º–º 1–∫–≥",
            "–ò–º–±–∏—Ä—å –ú–∞—Ä–∏–Ω–æ–≤–∞–Ω–Ω—ã–π –±–µ–ª—ã–π 1–∫–≥",
            "–í–æ–¥–æ—Ä–æ—Å–ª–∏ —Ü–≤–µ—Ç–Ω—ã–µ –∂–µ–ª—Ç—ã–µ (—Å—É—Ö–∏–µ) –ú–∞–º—ç –Ω–æ—Ä–∏ 80–≥—Ä*20–ª",
            "–í–æ–¥–æ—Ä–æ—Å–ª–∏ —Ü–≤–µ—Ç–Ω—ã–µ —Ä–æ–∑–æ–≤—ã–µ (—Å—É—Ö–∏–µ) –ú–∞–º—ç –Ω–æ—Ä–∏ 80–≥—Ä*20–ª",
            "–ú–∞—Å–ª–æ –ü–æ–¥—Å–æ–ª–Ω–µ—á–Ω–æ–µ Smart Chef –¥–ª—è —Ñ—Ä–∏—Ç—é—Ä–∞ 5–ª",
            "–ú—É–∫–∞ –ø—à–µ–Ω–∏—á–Ω–∞—è –¶–∞—Ä–∏—Ü–∞ –ö—É–±–∞–Ω—Å–∫–∞—è –í—ã—Å—à–∏–π –°–æ—Ä—Ç 5–∫–≥",
            "–°–∞—Ö–∞—Ä–Ω—ã–π –ø–µ—Å–æ–∫ —Å—É–º–∫–∞ –†–æ—Å—Å–∏—è 5–∫–≥",
            "–ü–æ—Ä–æ—à–æ–∫ –í–∞—Å–∞–±–∏ Tamaki 2–∫–≥"
        ],
        "–†–∞—Ñ—Ç": [
            "–ú–∞—Å–∞–≥–æ –∫—Ä–∞—Å–Ω–∞—è –°–∞–Ω—Ç–∞-–±—Ä–µ–º–æ—Ä",
            "–ú–∞—Å–∞–≥–æ —á–µ—Ä–Ω–∞—è –°–∞–Ω—Ç–∞-–±—Ä–µ–º–æ—Ä",
            "–ú–∞—Å–∞–≥–æ –æ—Ä–∞–Ω–∂–µ–≤–∞—è –°–∞–Ω—Ç–∞-–±—Ä–µ–º–æ—Ä",
            "–í–æ–¥–æ—Ä–æ—Å–ª–∏ –ù–æ—Ä–∏ 100 –ª–∏—Å—Ç–æ–≤, 240 –≥/—É–ø, 72—à—Ç/–∫–æ—Ä, 17,28 –∫–≥/–∫–æ—Ä, –†–æ—Å—Å–∏—è",
            "–°–æ—É—Å –ß–∏–ª–∏-–º–∞–Ω–≥–æ \"Food Service\", 1–∫–≥, 6 —à—Ç/–∫–æ—Ä, 10415806, –ì—É—Ä–º–∏–∫—Å, –†–æ—Å—Å–∏—è",
            "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω—ã–µ –¥–æ–ª—å–∫–∏ –≤ –∫–æ–∂—É—Ä–µ —Å–æ —Å–ø–µ—Ü–∏—è–º–∏, —É–ø. 0,9–∫–≥, –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–π, 9–∫–≥/–∫–æ—Ä, Tayyebat, –õ–∏–≤–∞–Ω",
            "–ö—É–Ω–∂—É—Ç–Ω–æ–µ —Å–µ–º—è –æ–±–∂–∞—Ä–µ–Ω–Ω–æ–µ –±–µ–ª–æ–µ 1 –∫–≥, 15 —à—Ç/–∫–æ—Ä, –°–ö–ú, –†–æ—Å—Å–∏—è",
            "–õ—É–∫ –∂–∞—Ä–µ–Ω—ã–π 1 –∫–≥, 10 —à—Ç/–∫–æ—Ä, –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã",
            "–°—ã—Ä —Ç–≤–æ—Ä–æ–∂–Ω—ã–π Cream cheese 69% –º.–¥.–∂, 2,5–∫–≥, BeChef, –ë–µ–ª–°—ã—Ä",
            "–õ—É–∫–æ–≤—ã–µ –∫–æ–ª—å—Ü–∞",
            "–ù–∞–≥–µ—Ç—Å—ã —Å–µ—Ä–≤–æ–ª—é–∫—Å"
        ],
        "–û—à–∏": [
            "–£–≥–æ—Ä—å –∂–∞—Ä–µ–Ω–Ω—ã–π –£–Ω–∞–≥–∏ –¢–ï–• (–≤ —É–ø 10%)",
            "–¢—É–Ω–µ—Ü —Ñ–∏–ª–µ \"–ï–ª–æ—É –§–∏–Ω\" –ü—Ä–µ–º–∏—É–º",
            "–°–æ—É—Å –£–Ω–∞–≥–∏ OSHI 1.8–ª",
            "–°–æ—É—Å –ö–∏–º—á–∏ 1.8–ª OSHI",
            "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å –§—Ä–∏ –ë—Ä—É—Å–æ–∫ 9*9 2.5–∫–≥*5, Lamb Weston",
            "–†–∏—Å –≤/—Å –†–æ—Å—Å–∏—è 25–∫–≥",
            "–£–∫—Å—É—Å –†–∏—Å–æ–≤—ã–π OSHI 20–ª –ø—Ä-–≤–æ –ö–æ—Å–º–æ—Å"
        ],
        "–•–æ–∑. —Ç–æ–≤–∞—Ä—ã": [
            "–ü–µ—Ä—á–∞—Ç–∫–∏ –Ω–∏—Ç—Ä–∏–ª–æ–≤—ã–µ —á–µ—Ä–Ω—ã–µ —Ä–∞–∑–º–µ—Ä L",
            "–ü–µ—Ä—á–∞—Ç–∫–∏ –Ω–∏—Ç—Ä–∏–ª–æ–≤—ã–µ —á–µ—Ä–Ω—ã–µ —Ä–∞–∑–º–µ—Ä M",
            "–ü–µ—Ä—á–∞—Ç–∫–∏ –Ω–∏—Ç—Ä–∏–ª–æ–≤—ã–µ —á–µ—Ä–Ω—ã–µ —Ä–∞–∑–º–µ—Ä S",
            "–°–∞–ª—Ñ–µ—Ç–∫–∏ –±—É–º–∞–∂–Ω—ã–µ –±–µ–ª—ã–µ 24—Ö24 400—à—Ç",
            "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ü–°-115 500–º–ª —Å –∫—Ä—ã—à–∫–æ–π",
            "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ü–°-115 750–º–ª —Å –∫—Ä—ã—à–∫–æ–π",
            "–ü–∞–∫–µ—Ç —Ñ–∞—Å–æ–≤–æ—á
