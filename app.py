from flask import Flask, render_template, request, redirect, session, url_for
import telebot
import json
import os
from datetime import datetime

app = Flask(__name__)
app.secret_key = 'f7c8392f8a9e234b8f92e8c9d1a2b3c4'  # –°–ª—É—á–∞–π–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞
BOT_TOKEN = '7937013933:AAF_iuBecx-o0etgGZhEzWGxv3cBHWfDpYQ'
GROUP_ID = '-1002633190524'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    bot = telebot.TeleBot(BOT_TOKEN)
    print(f"–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
    bot = None

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
def ensure_directories():
    if not os.path.exists('data'):
        os.makedirs('data')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
def safe_send_message(chat_id, text):
    if bot:
        try:
            message = bot.send_message(chat_id, text)
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
            return message
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            print(f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {text}")
    else:
        print("–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ —Å –ø–∞—Ä–æ–ª—è–º–∏
def init_password_files():
    if not os.path.exists('data/password.txt'):
        with open('data/password.txt', 'w', encoding='utf-8') as f:
            f.write('1234')

    if not os.path.exists('data/admin_password.txt'):
        with open('data/admin_password.txt', 'w', encoding='utf-8') as f:
            f.write('admin')

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
def load_products_data():
    try:
        if os.path.exists('data/products.json'):
            with open('data/products.json', 'r', encoding='utf-8') as f:
                return json.load(f)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ products.json: {e}")
    return create_default_products()

# –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
def create_default_products():
    default_data = {
        "–°–≤–∏—Ç –õ–∞–π—Ñ": [
            "–°—ã—Ä –ø–æ–ª—É—Ç–≤–µ—Ä–¥—ã–π –ú–æ—Ü–∞—Ä–µ–ª–ª–∞ –ü–∏—Ü—Ü–∞ 40% Bonfesio Cooking 2.6–∫–≥",
            "–°—ã—Ä –ü–∞—Ä–º–µ–∑–∞–Ω 9 –ú–µ—Å—è—Ü–µ–≤ –Æ–ö–ú–ü –¶–∏–ª–∏–Ω–¥—Ä 45% 6-6.5–∫–≥",
            "–°—ã—Ä \"Hochland\" –ø–ª–∞–≤–ª–µ–Ω–Ω—ã–π –ª–æ–º—Ç–µ–≤–æ–π –ë–∏—Å—Ç—Ä–æ –ß–µ–¥–¥–µ—Ä 1.107–∫–≥ (90 –ª–æ–º—Ç–∏–∫–æ–≤)",
            "–ö—Ä–∞–±–æ–≤–æ–µ –º—è—Å–æ –°–Ω–µ–∂–Ω—ã–π –∫—Ä–∞–± –æ—Ö–ª. (–∏–º–∏—Ç–∞—Ü–∏—è –∏–∑ —Å—É—Ä–∏–º–∏) VICI 500–≥—Ä",
            "–ö—Ä–µ–≤–µ—Ç–∫–∏ –±/–≥ –≤ –ø–∞–Ω—Ü–∏—Ä–µ —Å/–º Empacadora Bibo SA –≠–∫–≤–∞–¥–æ—Ä 16/20 1–∫–≥",
            "–ú–∞–π–æ–Ω–µ–∑ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π SoPro 67% 9.6–∫–≥",
            "–°–æ—É—Å –û—Ä–µ—Ö–æ–≤—ã–π (–∫—É–Ω–∂—É—Ç–Ω—ã–π) Smart Chef 1–ª",
            "–°–æ—É—Å –®—Ä–∏—Ä–∞—á–∞ 0.815–∫–≥ Uni-Eagle",
            "–°–æ—É—Å –°–æ–µ–≤—ã–π classic Smart Chef 20–ª",
            "–ö–µ—Ç—á—É–ø Smart Chef –¢–æ–º–∞—Ç–Ω—ã–π 2–∫–≥ –ë–∞–ª–∫",
            "–°–æ—É—Å Smart Chef –°—ã—Ä–Ω—ã–π 1–∫–≥",
            "–°–æ—É—Å –¶–µ–∑–∞—Ä—å –ê—Å—Ç–æ—Ä–∏—è 1–∫–≥",
            "–ü–∞–ª–æ—á–∫–∏ –°—ã—Ä–Ω—ã–µ –§—Ä–æ—Å—Ç-–∞ –ú–æ—Ü–∞—Ä–µ–ª–ª–∞ –≤ –ü–∞–Ω–∏—Ä–æ–≤–∫–µ –ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ 1–∫–≥",
            "–°—É—Ö–∞—Ä–∏ –ü–∞–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ Smart Chef –ü–∞–Ω–∫–æ –ì–æ–ª–¥ 4–º–º 1–∫–≥",
            "–ò–º–±–∏—Ä—å –ú–∞—Ä–∏–Ω–æ–≤–∞–Ω–Ω—ã–π –±–µ–ª—ã–π 1–∫–≥",
            "–í–æ–¥–æ—Ä–æ—Å–ª–∏ —Ü–≤–µ—Ç–Ω—ã–µ –∂–µ–ª—Ç—ã–µ (—Å—É—Ö–∏–µ) –ú–∞–º—ç –Ω–æ—Ä–∏ 80–≥—Ä*20–ª",
            "–í–æ–¥–æ—Ä–æ—Å–ª–∏ —Ü–≤–µ—Ç–Ω—ã–µ —Ä–æ–∑–æ–≤—ã–µ (—Å—É—Ö–∏–µ) –ú–∞–º—ç –Ω–æ—Ä–∏ 80–≥—Ä*20–ª",
            "–ú–∞—Å–ª–æ –ü–æ–¥—Å–æ–ª–Ω–µ—á–Ω–æ–µ Smart Chef –¥–ª—è —Ñ—Ä–∏—Ç—é—Ä–∞ 5–ª",
            "–ú—É–∫–∞ –ø—à–µ–Ω–∏—á–Ω–∞—è –¶–∞—Ä–∏—Ü–∞ –ö—É–±–∞–Ω—Å–∫–∞—è –í—ã—Å—à–∏–π –°–æ—Ä—Ç 5–∫–≥",
            "–°–∞—Ö–∞—Ä–Ω—ã–π –ø–µ—Å–æ–∫ —Å—É–º–∫–∞ –†–æ—Å—Å–∏—è 5–∫–≥",
            "–ü–æ—Ä–æ—à–æ–∫ –í–∞—Å–∞–±–∏ Tamaki 2–∫–≥"
        ],
        "–†–∞—Ñ—Ç": [
            "–ú–∞—Å–∞–≥–æ –∫—Ä–∞—Å–Ω–∞—è –°–∞–Ω—Ç–∞-–±—Ä–µ–º–æ—Ä",
            "–ú–∞—Å–∞–≥–æ —á–µ—Ä–Ω–∞—è –°–∞–Ω—Ç–∞-–±—Ä–µ–º–æ—Ä",
            "–ú–∞—Å–∞–≥–æ –æ—Ä–∞–Ω–∂–µ–≤–∞—è –°–∞–Ω—Ç–∞-–±—Ä–µ–º–æ—Ä",
            "–í–æ–¥–æ—Ä–æ—Å–ª–∏ –ù–æ—Ä–∏ 100 –ª–∏—Å—Ç–æ–≤, 240 –≥/—É–ø, 72—à—Ç/–∫–æ—Ä, 17,28 –∫–≥/–∫–æ—Ä, –†–æ—Å—Å–∏—è",
            "–°–æ—É—Å –ß–∏–ª–∏-–º–∞–Ω–≥–æ \"Food Service\", 1–∫–≥, 6 —à—Ç/–∫–æ—Ä, 10415806, –ì—É—Ä–º–∏–∫—Å, –†–æ—Å—Å–∏—è",
            "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω—ã–µ –¥–æ–ª—å–∫–∏ –≤ –∫–æ–∂—É—Ä–µ —Å–æ —Å–ø–µ—Ü–∏—è–º–∏, —É–ø. 0,9–∫–≥, –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–π, 9–∫–≥/–∫–æ—Ä, Tayyebat, –õ–∏–≤–∞–Ω",
            "–ö—É–Ω–∂—É—Ç–Ω–æ–µ —Å–µ–º—è –æ–±–∂–∞—Ä–µ–Ω–Ω–æ–µ –±–µ–ª–æ–µ 1 –∫–≥, 15 —à—Ç/–∫–æ—Ä, –°–ö–ú, –†–æ—Å—Å–∏—è",
            "–õ—É–∫ –∂–∞—Ä–µ–Ω—ã–π 1 –∫–≥, 10 —à—Ç/–∫–æ—Ä, –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã",
            "–°—ã—Ä —Ç–≤–æ—Ä–æ–∂–Ω—ã–π Cream cheese 69% –º.–¥.–∂, 2,5–∫–≥, BeChef, –ë–µ–ª–°—ã—Ä",
            "–õ—É–∫–æ–≤—ã–µ –∫–æ–ª—å—Ü–∞",
            "–ù–∞–≥–µ—Ç—Å—ã —Å–µ—Ä–≤–æ–ª—é–∫—Å"
        ],
        "–û—à–∏": [
            "–£–≥–æ—Ä—å –∂–∞—Ä–µ–Ω–Ω—ã–π –£–Ω–∞–≥–∏ –¢–ï–• (–≤ —É–ø 10%)",
            "–¢—É–Ω–µ—Ü —Ñ–∏–ª–µ \"–ï–ª–æ—É –§–∏–Ω\" –ü—Ä–µ–º–∏—É–º",
            "–°–æ—É—Å –£–Ω–∞–≥–∏ OSHI 1.8–ª",
            "–°–æ—É—Å –ö–∏–º—á–∏ 1.8–ª OSHI",
            "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å –§—Ä–∏ –ë—Ä—É—Å–æ–∫ 9*9 2.5–∫–≥*5, Lamb Weston",
            "–†–∏—Å –≤/—Å –†–æ—Å—Å–∏—è 25–∫–≥",
            "–£–∫—Å—É—Å –†–∏—Å–æ–≤—ã–π OSHI 20–ª –ø—Ä-–≤–æ –ö–æ—Å–º–æ—Å"
        ],
        "–•–æ–∑. —Ç–æ–≤–∞—Ä—ã": [
            "–ü–µ—Ä—á–∞—Ç–∫–∏ –Ω–∏—Ç—Ä–∏–ª–æ–≤—ã–µ —á–µ—Ä–Ω—ã–µ —Ä–∞–∑–º–µ—Ä L",
            "–ü–µ—Ä—á–∞—Ç–∫–∏ –Ω–∏—Ç—Ä–∏–ª–æ–≤—ã–µ —á–µ—Ä–Ω—ã–µ —Ä–∞–∑–º–µ—Ä M",
            "–ü–µ—Ä—á–∞—Ç–∫–∏ –Ω–∏—Ç—Ä–∏–ª–æ–≤—ã–µ —á–µ—Ä–Ω—ã–µ —Ä–∞–∑–º–µ—Ä S",
            "–°–∞–ª—Ñ–µ—Ç–∫–∏ –±—É–º–∞–∂–Ω—ã–µ –±–µ–ª—ã–µ 24—Ö24 400—à—Ç",
            "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ü–°-115 500–º–ª —Å –∫—Ä—ã—à–∫–æ–π",
            "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ü–°-115 750–º–ª —Å –∫—Ä—ã—à–∫–æ–π",
            "–ü–∞–∫–µ—Ç —Ñ–∞—Å–æ–≤–æ—á–Ω—ã–π –ü–ù–î 24—Ö37",
            "–ü–∞–∫–µ—Ç —Ñ–∞—Å–æ–≤–æ—á–Ω—ã–π –ü–ù–î 30—Ö40",
            "–ü–ª–µ–Ω–∫–∞ –ø–∏—â–µ–≤–∞—è 300–º–º —Ö 200–º",
            "–§–æ–ª—å–≥–∞ –∞–ª—é–º–∏–Ω–∏–µ–≤–∞—è 300–º–º —Ö 100–º",
            "–ü–∞–∫–µ—Ç—ã –¥–ª—è –º—É—Å–æ—Ä–∞ 120–ª (10—à—Ç)"
        ],
        "–†—ã–±–∞": [
            "–§–∏–ª–µ —Ñ–æ—Ä–µ–ª–∏ –æ—Ö–ª.",
            "–õ–æ—Å–æ—Å—å –∞—Ç–ª–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –æ—Ö–ª.",
            "–¢—É–Ω–µ—Ü —Ñ–∏–ª–µ –æ—Ö–ª."
        ]
    }
    save_products_data(default_data)
    return default_data

def save_products_data(data):
    try:
        with open('data/products.json', 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è products.json: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫
ensure_directories()
init_password_files()

@app.route('/')
def login():
    return render_template('login.html')

@app.route('/check_password', methods=['POST'])
def check_password():
    try:
        with open('data/password.txt', 'r', encoding='utf-8') as f:
            correct_password = f.read().strip()
        
        entered_password = request.form.get('password')
        if entered_password == correct_password:
            session['logged_in'] = True
            return redirect('/menu')
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è: {e}")
    return redirect('/')

@app.route('/logout')
def logout():
    session.pop('logged_in', None)
    return redirect('/')

@app.route('/menu')
def menu():
    if not session.get('logged_in'):
        return redirect('/')
    return render_template('menu.html')

@app.route('/products', methods=['GET', 'POST'])
def products():
    if not session.get('logged_in'):
        return redirect('/')
    
    products_data = load_products_data()
    
    if request.method == 'POST':
        supplier = request.form.get('supplier')
        name = request.form.get('name', '')
        date = request.form.get('date', '')
        target_date = request.form.get('target_date', '')
        branch = request.form.get('branch', '')
        
        if request.form.get('send'):
            items = []
            for key in request.form:
                if key not in ['supplier', 'name', 'date', 'target_date', 'branch', 'send']:
                    value = request.form.get(key)
                    if value and value.strip():
                        items.append(f"üîπ {key}: {value}")
            
            if items:
                message = (
                    f"üì¶ {supplier}\n"
                    f"üè¢ –§–∏–ª–∏–∞–ª: {branch}\n"
                    f"üë®‚Äçüç≥ –ü–æ–≤–∞—Ä: {name}\n"
                    f"üìÖ –î–∞—Ç–∞ –∑–∞—è–≤–∫–∏: {target_date}\n"
                    f"üìù –î–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: {date}\n\n" +
                    "\n".join(items)
                )
                safe_send_message(GROUP_ID, message)
            return redirect('/menu')
        
        if supplier in products_data:
            products = products_data[supplier]
            return render_template('products.html', supplier=supplier, products=products)
    
    return render_template('products.html', supplier=None, suppliers=["–°–≤–∏—Ç –õ–∞–π—Ñ", "–†–∞—Ñ—Ç", "–û—à–∏"])

@app.route('/hoz', methods=['GET', 'POST'])
def hoz():
    if not session.get('logged_in'):
        return redirect('/')
    
    products_data = load_products_data()
    
    if request.method == 'POST':
        name = request.form.get('name', '')
        date = request.form.get('date', '')
        target_date = request.form.get('target_date', '')
        branch = request.form.get('branch', '')
        
        items = []
        for key in request.form:
            if key not in ['name', 'date', 'target_date', 'branch', 'send']:
                value = request.form.get(key)
                if value and value.strip():
                    items.append(f"üîπ {key}: {value}")
        
        if items:
            message = (
                f"üßπ –•–æ–∑. —Ç–æ–≤–∞—Ä—ã\n"
                f"üè¢ –§–∏–ª–∏–∞–ª: {branch}\n"
                f"üë®‚Äçüç≥ –ü–æ–≤–∞—Ä: {name}\n"
                f"üìÖ –î–∞—Ç–∞ –∑–∞—è–≤–∫–∏: {target_date}\n"
                f"üìù –î–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: {date}\n\n" +
                "\n".join(items)
            )
            safe_send_message(GROUP_ID, message)
        return redirect('/menu')
    
    return render_template('hoz.html', products=products_data["–•–æ–∑. —Ç–æ–≤–∞—Ä—ã"])

@app.route('/fish', methods=['GET', 'POST'])
def fish():
    if not session.get('logged_in'):
        return redirect('/')
    
    products_data = load_products_data()
    
    if request.method == 'POST':
        name = request.form.get('name', '')
        date = request.form.get('date', '')
        target_date = request.form.get('target_date', '')
        branch = request.form.get('branch', '')
        
        items = []
        for key in request.form:
            if key not in ['name', 'date', 'target_date', 'branch', 'send']:
                value = request.form.get(key)
                if value and value.strip():
                    items.append(f"üîπ {key}: {value}")
        
        if items:
            message = (
                f"üêü –†—ã–±–∞\n"
                f"üè¢ –§–∏–ª–∏–∞–ª: {branch}\n"
                f"üë®‚Äçüç≥ –ü–æ–≤–∞—Ä: {name}\n"
                f"üìÖ –î–∞—Ç–∞ –∑–∞—è–≤–∫–∏: {target_date}\n"
                f"üìù –î–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: {date}\n\n" +
                "\n".join(items)
            )
            safe_send_message(GROUP_ID, message)
        return redirect('/menu')
    
    return render_template('fish.html', products=products_data["–†—ã–±–∞"])

@app.route('/admin')
def admin():
    if not session.get('admin_logged_in'):
        return redirect('/admin_login')
    products_data = load_products_data()
    return render_template('admin.html', products_data=products_data)

@app.route('/admin_login', methods=['GET', 'POST'])
def admin_login():
    if request.method == 'POST':
        try:
            with open('data/admin_password.txt', 'r', encoding='utf-8') as f:
                correct_password = f.read().strip()
            
            entered_password = request.form.get('password')
            if entered_password == correct_password:
                session['admin_logged_in'] = True
                return redirect('/admin')
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: {e}")
        return redirect('/admin_login')
    return render_template('admin_login.html')

@app.route('/admin_logout')
def admin_logout():
    session.pop('admin_logged_in', None)
    return redirect('/')

@app.route('/change_password', methods=['POST'])
def change_password():
    if not session.get('admin_logged_in'):
        return redirect('/admin_login')
    
    try:
        password_type = request.form.get('password_type')
        new_password = request.form.get('new_password')
        
        if password_type == 'user':
            with open('data/password.txt', 'w', encoding='utf-8') as f:
                f.write(new_password)
        elif password_type == 'admin':
            with open('data/admin_password.txt', 'w', encoding='utf-8') as f:
                f.write(new_password)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è: {e}")
    
    return redirect('/admin')

@app.route('/add_section', methods=['POST'])
def add_section():
    if not session.get('admin_logged_in'):
        return redirect('/admin_login')
    
    try:
        section_name = request.form.get('section_name')
        products_data = load_products_data()
        
        if section_name and section_name not in products_data:
            products_data[section_name] = []
            save_products_data(products_data)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞: {e}")
    
    return redirect('/admin')

@app.route('/delete_section', methods=['POST'])
def delete_section():
    if not session.get('admin_logged_in'):
        return redirect('/admin_login')
    
    try:
        section_name = request.form.get('section_name')
        products_data = load_products_data()
        
        if section_name in products_data:
            del products_data[section_name]
            save_products_data(products_data)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞: {e}")
    
    return redirect('/admin')

@app.route('/add_product', methods=['POST'])
def add_product():
    if not session.get('admin_logged_in'):
        return redirect('/admin_login')
    
    try:
        section_name = request.form.get('section_name')
        product_name = request.form.get('product_name')
        products_data = load_products_data()
        
        if section_name in products_data and product_name:
            if product_name not in products_data[section_name]:
                products_data[section_name].append(product_name)
                save_products_data(products_data)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
    
    return redirect('/admin')

@app.route('/delete_product', methods=['POST'])
def delete_product():
    if not session.get('admin_logged_in'):
        return redirect('/admin_login')
    
    try:
        section_name = request.form.get('section_name')
        product_name = request.form.get('product_name')
        products_data = load_products_data()
        
        if section_name in products_data and product_name in products_data[section_name]:
            products_data[section_name].remove(product_name)
            save_products_data(products_data)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
    
    return redirect('/admin')

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == '__main__':
    app.run()
